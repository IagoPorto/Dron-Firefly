#include "RTIMULib.h"
#include "sensors.hpp"

#include <iostream>
#include <sstream>
#include <string>

int main()
{

    Config config;
    auto session = expect<Session>(open(std::move(config)));
    
    //Sensores lsm
    
    auto publisherSensors = expect<Publisher>(session.declare_publisher(KEY_RTIMULIB_YAW));

    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;

    std::string data;

    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    while (1) {
        //  poll at the rate recommended by the IMU

        usleep(imu->IMUGetPollInterval() * 1000);

        while (imu->IMURead()) {
            RTIMU_DATA imuData = imu->getIMUData();
            sampleCount++;

            now = RTMath::currentUSecsSinceEpoch();
            //  display 10 times per second

            if ((now - displayTimer) > 10000) {

                data = "";                
                std::string input = RTMath::displayDegrees("", imuData.fusionPose);
                displayTimer = now;

                // Crear un flujo de cadena (istringstream) para procesar la cadena
                std::istringstream iss(input);

                // Variables para almacenar los valores de roll, pitch y yaw
                std::string roll, pitch, yaw;
                
                // Ignorar los primeros caracteres hasta que encuentre "roll:"
                iss.ignore(std::numeric_limits<std::streamsize>::max(), ':');
                iss.ignore(std::numeric_limits<std::streamsize>::max(), ':');

                // Leer el valor de roll
                iss >> roll;
                roll.pop_back();
                data = data + roll + " ";
                // publisherRoll.put(roll);

                // Ignorar los caracteres hasta que encuentre "pitch:"
                iss.ignore(std::numeric_limits<std::streamsize>::max(), ':');

                // Leer el valor de pitch
                iss >> pitch;
                pitch.pop_back();
                data = data + pitch + " ";

                // Ignorar los caracteres hasta que encuentre "yaw:"
                iss.ignore(std::numeric_limits<std::streamsize>::max(), ':');

                // Leer el valor de yaw
                iss >> yaw;
                yaw.pop_back();
                data = data + yaw;

                publisherSensors.put (data.c_str ());
            }

            //  update rate every second

            if ((now - rateTimer) > 1000000) {
                sampleRate = sampleCount;
                sampleCount = 0;
                rateTimer = now;
            }
        }
    }
}


